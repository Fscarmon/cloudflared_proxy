name: Build and Release cloudflared

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # 允许手动触发工作流
    inputs:
      create_release:
        description: '创建发布版本'
        required: true
        default: false
        type: boolean

jobs:
  build:
    name: Build cloudflared
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: freebsd
            goarch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up custom Cloudflare Go
        run: |
          cd /tmp
          git clone -q https://github.com/cloudflare/go
          cd go/src
          git checkout -q af19da5605ca11f85776ef7af3384a02a315a52b
          ./make.bash
          echo "/tmp/go/bin" >> $GITHUB_PATH

      - name: Build cloudflared
        env:
          GO111MODULE: "on"
          CGO_ENABLED: "0"
          TARGET_GOOS: ${{ matrix.goos }}
          TARGET_GOARCH: ${{ matrix.goarch }}
          CONTAINER_BUILD: "1"
        run: |
          make cloudflared

      - name: Rename binary based on OS and architecture
        run: |
          mkdir -p ./dist
          cp ./cloudflared ./dist/cloudflared-${{ matrix.goos }}-${{ matrix.goarch }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cloudflared-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ./dist/cloudflared-${{ matrix.goos }}-${{ matrix.goarch }}
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    # 当有标签推送或手动触发并选择创建发布时运行
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.create_release == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find ./artifacts -type f | while read file; do
            cp "$file" ./release-assets/
          done
          cd release-assets
          for file in *; do
            chmod +x "$file"
            sha256sum "$file" > "$file.sha256"
          done

      - name: Generate release tag if not exists
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          echo "RELEASE_TAG=build-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      - name: Set existing tag name
        if: "startsWith(github.ref, 'refs/tags/')"
        run: |
          echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: ./release-assets/*
          name: Release ${{ env.RELEASE_TAG }}
          tag_name: ${{ env.RELEASE_TAG }}
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          generate_release_notes: true
